/* tslint:disable */
/* eslint-disable */
/**
 * myJobPlanner API
 * The myJobPlanner API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Business
 */
export interface Business {
    /**
     * 
     * @type {number}
     * @memberof Business
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Business
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Business
     */
    'timezone': string;
    /**
     * 
     * @type {string}
     * @memberof Business
     */
    'countryCode': string;
}
/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Client
     */
    'businessId': number;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'lastName'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Business>}
     * @memberof InlineResponse200
     */
    'data'?: Array<Business>;
    /**
     * 
     * @type {InlineResponse200Meta}
     * @memberof InlineResponse200
     */
    'meta'?: InlineResponse200Meta;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<Client>}
     * @memberof InlineResponse2001
     */
    'data'?: Array<Client>;
    /**
     * 
     * @type {InlineResponse200Meta}
     * @memberof InlineResponse2001
     */
    'meta'?: InlineResponse200Meta;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<Property>}
     * @memberof InlineResponse2002
     */
    'data'?: Array<Property>;
    /**
     * 
     * @type {InlineResponse200Meta}
     * @memberof InlineResponse2002
     */
    'meta'?: InlineResponse200Meta;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<Job>}
     * @memberof InlineResponse2003
     */
    'data'?: Array<Job>;
    /**
     * 
     * @type {InlineResponse200Meta}
     * @memberof InlineResponse2003
     */
    'meta'?: InlineResponse200Meta;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<Visit>}
     * @memberof InlineResponse2004
     */
    'data'?: Array<Visit>;
    /**
     * 
     * @type {InlineResponse200Meta}
     * @memberof InlineResponse2004
     */
    'meta'?: InlineResponse200Meta;
}
/**
 * 
 * @export
 * @interface InlineResponse200Meta
 */
export interface InlineResponse200Meta {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200Meta
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'clientId': number;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'propertyId': number;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'recurrences'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'begins': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'ends'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'startTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'finishTime'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Job
     */
    'anytime': boolean;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Job
     */
    'closed': boolean;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'invoice': JobInvoiceEnum;
    /**
     * 
     * @type {Array<LineItem>}
     * @memberof Job
     */
    'lineItems'?: Array<LineItem>;
}

export const JobInvoiceEnum = {
    Closed: 'closed',
    Monthly: 'monthly',
    Never: 'never',
    Visit: 'visit'
} as const;

export type JobInvoiceEnum = typeof JobInvoiceEnum[keyof typeof JobInvoiceEnum];

/**
 * 
 * @export
 * @interface LineItem
 */
export interface LineItem {
    /**
     * 
     * @type {number}
     * @memberof LineItem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LineItem
     */
    'serviceId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof LineItem
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof LineItem
     */
    'quantity': number;
    /**
     * 
     * @type {number}
     * @memberof LineItem
     */
    'unitCost'?: number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Property
 */
export interface Property {
    /**
     * 
     * @type {number}
     * @memberof Property
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Property
     */
    'clientId': number;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'address1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'address2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'postalCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Property
     */
    'country'?: string | null;
}
/**
 * 
 * @export
 * @interface Visit
 */
export interface Visit {
    /**
     * 
     * @type {number}
     * @memberof Visit
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Visit
     */
    'jobId': number;
    /**
     * 
     * @type {number}
     * @memberof Visit
     */
    'invoiceId'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof Visit
     */
    'completed': boolean;
    /**
     * 
     * @type {string}
     * @memberof Visit
     */
    'begins': string;
    /**
     * 
     * @type {string}
     * @memberof Visit
     */
    'ends'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Visit
     */
    'anytime': boolean;
    /**
     * 
     * @type {Array<LineItem>}
     * @memberof Visit
     */
    'lineItems': Array<LineItem>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create business
         * @param {Business} business Create business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusiness: async (business: Business, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'business' is not null or undefined
            assertParamExists('createBusiness', 'business', business)
            const localVarPath = `/businesses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(business, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create client
         * @param {number} businessId Numeric Id of the business to get
         * @param {Client} client Create client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient: async (businessId: number, client: Client, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('createClient', 'businessId', businessId)
            // verify required parameter 'client' is not null or undefined
            assertParamExists('createClient', 'client', client)
            const localVarPath = `/businesses/{businessId}/clients`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(client, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create job
         * @param {number} businessId Numeric Id of the business to get
         * @param {Job} job Create job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob: async (businessId: number, job: Job, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('createJob', 'businessId', businessId)
            // verify required parameter 'job' is not null or undefined
            assertParamExists('createJob', 'job', job)
            const localVarPath = `/businesses/{businessId}/jobs`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(job, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create property
         * @param {number} businessId Numeric Id of the business to get
         * @param {Property} property Create property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProperty: async (businessId: number, property: Property, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('createProperty', 'businessId', businessId)
            // verify required parameter 'property' is not null or undefined
            assertParamExists('createProperty', 'property', property)
            const localVarPath = `/businesses/{businessId}/properties`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(property, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create visit
         * @param {number} businessId Numeric Id of the business to get
         * @param {Visit} visit Create visit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisit: async (businessId: number, visit: Visit, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('createVisit', 'businessId', businessId)
            // verify required parameter 'visit' is not null or undefined
            assertParamExists('createVisit', 'visit', visit)
            const localVarPath = `/businesses/{businessId}/visits`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all businesses
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {'id' | 'created' | 'name'} [orderBy] Order by field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBusinesses: async (offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', orderBy?: 'id' | 'created' | 'name', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/businesses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all clients
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findClients: async (businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('findClients', 'businessId', businessId)
            const localVarPath = `/businesses/{businessId}/clients`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all jobs
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {number} [clientId] filter by client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findJobs: async (businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('findJobs', 'businessId', businessId)
            const localVarPath = `/businesses/{businessId}/jobs`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all properties
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {number} [clientId] filter by client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProperties: async (businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('findProperties', 'businessId', businessId)
            const localVarPath = `/businesses/{businessId}/properties`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all visits
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {number} [clientId] filter by client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findVisits: async (businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('findVisits', 'businessId', businessId)
            const localVarPath = `/businesses/{businessId}/visits`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderDirection !== undefined) {
                localVarQueryParameter['orderDirection'] = orderDirection;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single business
         * @param {number} id Numeric Id of the resource to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusiness: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBusiness', 'id', id)
            const localVarPath = `/businesses/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a single business
         * @param {number} id Numeric Id of the resource to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusiness: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBusiness', 'id', id)
            const localVarPath = `/businesses/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update visit
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} id Numeric Id of the resource to get
         * @param {Visit} visit Update visit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVisit: async (businessId: number, id: number, visit: Visit, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('updateVisit', 'businessId', businessId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVisit', 'id', id)
            // verify required parameter 'visit' is not null or undefined
            assertParamExists('updateVisit', 'visit', visit)
            const localVarPath = `/businesses/{businessId}/visits/{Id}`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)))
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(visit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Create business
         * @param {Business} business Create business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBusiness(business: Business, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Business>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBusiness(business, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create client
         * @param {number} businessId Numeric Id of the business to get
         * @param {Client} client Create client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClient(businessId: number, client: Client, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Client>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClient(businessId, client, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create job
         * @param {number} businessId Numeric Id of the business to get
         * @param {Job} job Create job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJob(businessId: number, job: Job, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJob(businessId, job, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create property
         * @param {number} businessId Numeric Id of the business to get
         * @param {Property} property Create property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProperty(businessId: number, property: Property, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Property>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProperty(businessId, property, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create visit
         * @param {number} businessId Numeric Id of the business to get
         * @param {Visit} visit Create visit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVisit(businessId: number, visit: Visit, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Visit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVisit(businessId, visit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all businesses
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {'id' | 'created' | 'name'} [orderBy] Order by field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findBusinesses(offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', orderBy?: 'id' | 'created' | 'name', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findBusinesses(offset, limit, orderDirection, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all clients
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findClients(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findClients(businessId, offset, limit, orderDirection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all jobs
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {number} [clientId] filter by client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findJobs(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findJobs(businessId, offset, limit, orderDirection, clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all properties
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {number} [clientId] filter by client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findProperties(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findProperties(businessId, offset, limit, orderDirection, clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all visits
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {number} [clientId] filter by client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findVisits(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findVisits(businessId, offset, limit, orderDirection, clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single business
         * @param {number} id Numeric Id of the resource to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusiness(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Business>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusiness(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a single business
         * @param {number} id Numeric Id of the resource to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusiness(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Business>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusiness(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update visit
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} id Numeric Id of the resource to get
         * @param {Visit} visit Update visit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVisit(businessId: number, id: number, visit: Visit, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Visit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVisit(businessId, id, visit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Create business
         * @param {Business} business Create business
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusiness(business: Business, options?: any): AxiosPromise<Business> {
            return localVarFp.createBusiness(business, options).then((request) => request(axios, basePath));
        },
        /**
         * Create client
         * @param {number} businessId Numeric Id of the business to get
         * @param {Client} client Create client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(businessId: number, client: Client, options?: any): AxiosPromise<Client> {
            return localVarFp.createClient(businessId, client, options).then((request) => request(axios, basePath));
        },
        /**
         * Create job
         * @param {number} businessId Numeric Id of the business to get
         * @param {Job} job Create job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob(businessId: number, job: Job, options?: any): AxiosPromise<Job> {
            return localVarFp.createJob(businessId, job, options).then((request) => request(axios, basePath));
        },
        /**
         * Create property
         * @param {number} businessId Numeric Id of the business to get
         * @param {Property} property Create property
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProperty(businessId: number, property: Property, options?: any): AxiosPromise<Property> {
            return localVarFp.createProperty(businessId, property, options).then((request) => request(axios, basePath));
        },
        /**
         * Create visit
         * @param {number} businessId Numeric Id of the business to get
         * @param {Visit} visit Create visit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVisit(businessId: number, visit: Visit, options?: any): AxiosPromise<Visit> {
            return localVarFp.createVisit(businessId, visit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all businesses
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {'id' | 'created' | 'name'} [orderBy] Order by field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findBusinesses(offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', orderBy?: 'id' | 'created' | 'name', options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.findBusinesses(offset, limit, orderDirection, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all clients
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findClients(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.findClients(businessId, offset, limit, orderDirection, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all jobs
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {number} [clientId] filter by client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findJobs(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.findJobs(businessId, offset, limit, orderDirection, clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all properties
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {number} [clientId] filter by client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findProperties(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.findProperties(businessId, offset, limit, orderDirection, clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all visits
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} [offset] offset from beginning
         * @param {number} [limit] maximum number of results to return
         * @param {'ASC' | 'DESC'} [orderDirection] Order direction
         * @param {number} [clientId] filter by client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findVisits(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.findVisits(businessId, offset, limit, orderDirection, clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single business
         * @param {number} id Numeric Id of the resource to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusiness(id: number, options?: any): AxiosPromise<Business> {
            return localVarFp.getBusiness(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a single business
         * @param {number} id Numeric Id of the resource to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusiness(id: number, options?: any): AxiosPromise<Business> {
            return localVarFp.updateBusiness(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update visit
         * @param {number} businessId Numeric Id of the business to get
         * @param {number} id Numeric Id of the resource to get
         * @param {Visit} visit Update visit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVisit(businessId: number, id: number, visit: Visit, options?: any): AxiosPromise<Visit> {
            return localVarFp.updateVisit(businessId, id, visit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Create business
     * @param {Business} business Create business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBusiness(business: Business, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBusiness(business, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create client
     * @param {number} businessId Numeric Id of the business to get
     * @param {Client} client Create client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createClient(businessId: number, client: Client, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createClient(businessId, client, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create job
     * @param {number} businessId Numeric Id of the business to get
     * @param {Job} job Create job
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createJob(businessId: number, job: Job, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createJob(businessId, job, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create property
     * @param {number} businessId Numeric Id of the business to get
     * @param {Property} property Create property
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createProperty(businessId: number, property: Property, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createProperty(businessId, property, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create visit
     * @param {number} businessId Numeric Id of the business to get
     * @param {Visit} visit Create visit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createVisit(businessId: number, visit: Visit, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createVisit(businessId, visit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all businesses
     * @param {number} [offset] offset from beginning
     * @param {number} [limit] maximum number of results to return
     * @param {'ASC' | 'DESC'} [orderDirection] Order direction
     * @param {'id' | 'created' | 'name'} [orderBy] Order by field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findBusinesses(offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', orderBy?: 'id' | 'created' | 'name', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findBusinesses(offset, limit, orderDirection, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all clients
     * @param {number} businessId Numeric Id of the business to get
     * @param {number} [offset] offset from beginning
     * @param {number} [limit] maximum number of results to return
     * @param {'ASC' | 'DESC'} [orderDirection] Order direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findClients(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findClients(businessId, offset, limit, orderDirection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all jobs
     * @param {number} businessId Numeric Id of the business to get
     * @param {number} [offset] offset from beginning
     * @param {number} [limit] maximum number of results to return
     * @param {'ASC' | 'DESC'} [orderDirection] Order direction
     * @param {number} [clientId] filter by client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findJobs(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findJobs(businessId, offset, limit, orderDirection, clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all properties
     * @param {number} businessId Numeric Id of the business to get
     * @param {number} [offset] offset from beginning
     * @param {number} [limit] maximum number of results to return
     * @param {'ASC' | 'DESC'} [orderDirection] Order direction
     * @param {number} [clientId] filter by client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findProperties(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findProperties(businessId, offset, limit, orderDirection, clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all visits
     * @param {number} businessId Numeric Id of the business to get
     * @param {number} [offset] offset from beginning
     * @param {number} [limit] maximum number of results to return
     * @param {'ASC' | 'DESC'} [orderDirection] Order direction
     * @param {number} [clientId] filter by client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findVisits(businessId: number, offset?: number, limit?: number, orderDirection?: 'ASC' | 'DESC', clientId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findVisits(businessId, offset, limit, orderDirection, clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single business
     * @param {number} id Numeric Id of the resource to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBusiness(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBusiness(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a single business
     * @param {number} id Numeric Id of the resource to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBusiness(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateBusiness(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update visit
     * @param {number} businessId Numeric Id of the business to get
     * @param {number} id Numeric Id of the resource to get
     * @param {Visit} visit Update visit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateVisit(businessId: number, id: number, visit: Visit, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateVisit(businessId, id, visit, options).then((request) => request(this.axios, this.basePath));
    }
}


